{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/clientsReducer.js","redux/reducers/sessionsReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/clientSaga.js","redux/sagas/sessionSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/LogSessionForm/LogSessionForm.js","components/Email/Email.js","components/ClientCard/ClientCard.js","components/UserPage/UserPage.js","components/ManageClients/EditButton.js","components/DeleteClient/DeleteClient.js","components/ManageClients/ManageRow.js","components/ManageClients/ManageClients.js","components/ResetPassword/ResetPassword.js","components/ResetPassword/NewPassword.js","components/GridContainer/GridContainer.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","clients","currentClient","sessions","rootReducer","errors","user","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","addClient","deleteClient","editClient","fetchClients","clientSaga","alert","clientSaga_marked","delete","concat","clientSaga_marked2","clientSaga_marked3","_context4","_marked4","_context5","_marked5","clearCard","deleteSession","fetchSessions","logSession","sessionSaga","sessionSaga_marked","session_id","moment","date","format","sessionSaga_marked2","sessionSaga_marked3","sessionSaga_marked4","sessionSaga_marked5","rootSaga","all","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","Link","to","id","Fragment","components_LogOutButton_LogOutButton","Footer","LoginPage","username","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","Object","defineProperty","target","value","resetPassword","history","push","role","htmlFor","index_es","name","autoComplete","onChange","variant","color","Component","RegisterPage","_this2","onSubmit","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","Route","assign","LogSessionForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getDate","Date","today","handleChangeFor","property","handleClose","open","handleOpen","client","parseInt","icons_index_es","onClose","Email","emailReminder","method","url","recipient","email_address","first_name","sessionsLeft","session","then","last_name","catch","error","subject","message","fullWidth","disabled","multiline","ClientCard","window","confirm","handleDelete","filter","client_id","components_Email_Email","components_LogSessionForm_LogSessionForm","map","i","key","UserPage","getClients","getSessions","handleClientChange","clientToView","components_ClientCard_ClientCard","EditButton","clientToEdit","objectSpread","label","defaultValue","DeleteClient","ManageRow","ManageClients_EditButton","components_DeleteClient_DeleteClient","ManageClients","view","setView","size","ManageClients_ManageRow","ResetPassword","handleChange","email","handleSubmit","now","NewPassword","_this$setState","confirm_password","token","match","params","GridContainer","classes","container","spacing","item","xs","md","style","height","content","children","React","withStyles","theme","_content","backgroundColor","breakpoints","down","up","App","components_GridContainer_GridContainer","HashRouter","components_Nav_Nav","Switch","Redirect","exact","from","components_ProtectedRoute_ProtectedRoute","path","render","components_Footer_Footer","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","createMuiTheme","typography","useNextVariants","palette","primary","main","secondary","run","ReactDOM","react_redux_es","core_styles","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.5517f643.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","import { combineReducers } from 'redux';\n\nconst clients = (state = [], action) => {\n    if (action.type === 'SET_CLIENTS'){\n        return action.payload;\n    } \n    return state\n}\nconst currentClient = (state = [], action) => {\n    if (action.type === 'SET_CURRENT_CLIENT'){\n        return action.payload;\n    }\n    return state; \n}\n\nexport default combineReducers({\n    clients, \n    currentClient\n});","import { combineReducers } from 'redux';\n\nconst sessions = (state = [], action) => {\n    if (action.type === 'SET_SESSIONS'){\n        return action.payload;\n    } \n    return state\n}\n\nexport default combineReducers({\n    sessions\n});","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport clients from './clientsReducer'; \nimport sessions from './sessionsReducer'; \n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  clients, // contains a list of all clients \n  sessions, // contains a list of all sessions \n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* addClient(action) {\n    try {\n        // post a new client \n        yield axios.post('/api/clients', action.payload);\n        yield put ({ type: 'FETCH_CLIENTS'}); \n        alert('Client added!');\n    } catch (error) {\n        console.log('Error adding clients', error); \n        alert('Error adding client'); \n    }\n}\nfunction* deleteClient(action) {\n    try {\n        // deletes all of a client's sessions then deletes the client \n        axios.delete(`/api/sessions/remove?id=${action.payload}`); \n        alert('Sucess!'); \n        yield put ({type: 'FETCH_CLIENTS'});\n    } catch (error) {\n        console.log('Error deleting client', error); \n        alert('Error deleting client. Please try again.'); \n    }\n}\nfunction* editClient(action) {\n    try {\n        //edits a client's records\n        console.log(action.payload);\n        yield axios.put('/api/clients', action.payload);\n        yield put ({type: 'FETCH_CLIENTS'});\n        alert('Client edited!'); \n    } catch (error) {\n        console.log('Error editing client', error); \n        alert('Error editing client. Please try again.');\n    }\n}\nfunction* fetchClients() {\n    try {\n        // fetch a list of all clients \n        const response = yield axios.get('/api/clients');\n        yield put({ type: 'SET_CLIENTS', payload: response.data })\n    } catch (error) {\n        console.log('Error fetching clients', error);\n    }\n}\nfunction* clientSaga() {\n    yield takeLatest('FETCH_CLIENTS', fetchClients);\n    yield takeLatest('ADD_CLIENT', addClient);\n    yield takeLatest('EDIT_CLIENT', editClient); \n    yield takeLatest('DELETE_CLIENT', deleteClient); \n}\n\nexport default clientSaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport moment from 'moment'; \n\nfunction* clearCard(action) {\n    try {\n        yield axios.delete(`/api/sessions/clear?id=${action.payload}`);\n        alert('Card cleared!');\n        yield put ({type: 'FETCH_CLIENTS'}); \n        yield put ({type: 'FETCH_SESSIONS'});\n    } catch (error){\n        console.log('Error deleting card', error); \n    }\n}\nfunction* deleteSession(action) {\n    try {\n        yield axios.delete(`/api/sessions?id=${action.payload.session_id}`);\n        alert(`Session on ${moment(action.payload.date).format('MM/DD/YYYY')} deleted.`); \n        yield put ({type: 'FETCH_SESSIONS'});\n    } catch (error) {\n        console.log('Error deleting session', error); \n    }\n}\nfunction* fetchSessions() {\n    try {\n        // gets all sessions for all existing clients \n       const sessions = yield axios.get('/api/sessions'); \n       yield put ({type: 'SET_SESSIONS', payload: sessions.data}); \n    } catch (error) {\n        console.log('Error fetching sessions', error); \n    }\n}\nfunction* logSession(action) {\n    try {\n        // logs a new session\n        yield axios.post('/api/sessions', action.payload);\n        yield put({ type: 'FETCH_SESSIONS' })\n    } catch (error) {\n        console.log('Error fetching clients', error);\n    }\n}\nfunction* sessionSaga() {\n    yield takeLatest('LOG_SESSION', logSession);\n    yield takeLatest('FETCH_SESSIONS', fetchSessions);\n    yield takeLatest('DELETE_SESSION', deleteSession);\n    yield takeLatest('CLEAR_CARD', clearCard);\n}\n\nexport default sessionSaga;\n\n\n","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport clientSaga from './clientSaga'; \nimport sessionSaga from './sessionSaga'; \n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    clientSaga(),\n    sessionSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n      <h2 className=\"nav-title\">Fitness Meets Wellness Session Tracker</h2>\n    </Link>\n    <div className=\"nav-right\">\n      <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? 'Home' : 'Login / Register'}\n      </Link>\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/clients\">\n            Manage Clients\n          </Link>\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n    </div>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\nconst Footer = () => (\n  <footer>\n    <p className=\"center-footer\">Fitness Meets Wellness &copy; 2018 </p>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, TextField } from '@material-ui/core'; \n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n  resetPassword = () => {\n    console.log('in reset password');\n    this.props.history.push('/resetpassword'); \n  }\n  render() {\n    return (\n      <div className=\"login-form\">\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <TextField\n                type=\"text\"\n                name=\"username\"\n                autoComplete=\"off\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <TextField\n                type=\"password\"\n                name=\"password\"\n                autoComplete=\"off\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div className=\"button-margin\">\n            <Button variant=\"contained\" color=\"primary\" onClick={this.login}>Login</Button><br/><br/>\n            <Button onClick={this.resetPassword}>Forgot Password?</Button>\n          </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { IconButton, Button, Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText, TextField } from '@material-ui/core';\nimport moment from 'moment';\nimport { AddBox } from '@material-ui/icons'; \n\nclass LogSessionForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            date: '',\n            client: parseInt(this.props.client.id)\n        }\n    }\n    componentDidMount() {\n        this.getDate();\n    }\n    getDate = () => {\n        let date = new Date();\n        let today = moment(date).format('YYYY-MM-DD');\n        this.setState({\n            date: today\n        });\n        console.log(today);\n    }\n    handleChangeFor = (event, property) => {\n        this.setState({\n            [property]: event.target.value,\n        });\n    }\n    handleClose = () => {\n        this.setState({\n            open: false\n        })\n    }\n    handleOpen = () => {\n        this.setState({\n          open: true\n        })\n      }\n    logSession = () => {\n        this.handleClose();\n        this.props.dispatch({ type: 'LOG_SESSION', payload: { client: this.state.client, date: this.state.date } })\n    }\n    render() {\n        return (\n            <div className=\"sticky-right\">\n                <IconButton onClick={this.handleOpen} color=\"primary\" variant=\"contained\"><AddBox/></IconButton>\n                <Dialog open={this.state.open} onClose={this.handleClose}>\n                    <DialogTitle>Log Session</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>Select Date</DialogContentText>\n                        <TextField onChange={(event) => this.handleChangeFor(event, 'date')} type=\"date\" value={this.state.date} />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose}>Cancel</Button>\n                        <Button color=\"primary\" variant=\"contained\" onClick={this.logSession}>Submit</Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.user,\n});\n\nexport default connect(mapStateToProps)(LogSessionForm);","import React, { Component } from 'react';\nimport  {IconButton, Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText, Button, TextField } from '@material-ui/core';\nimport { MailOutline } from '@material-ui/icons'; \nimport axios from 'axios'; \nimport { connect } from 'react-redux'; \n\nclass Email extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false, \n            subject: 'Fitness Meets Wellness Session Renewal Reminder', \n        }\n    }\n    emailReminder = () => {\n        this.setState({\n            open: false\n        })\n        axios({\n            method: 'POST', \n            url: '/api/clients/email',\n            data: {recipient: this.props.client.email_address, name: this.props.client.first_name, sessionsLeft: (this.props.client.sessions - this.props.session.length) }\n        }).then((response) => {\n            alert(`Reminder sent to ${this.props.client.first_name} ${this.props.client.last_name}!`)\n        }).catch((error) => {\n            console.log('Error sending reminder. Please try again', error); \n        })\n    }\n    handleClose = () => {\n        this.setState({\n            open: false\n        })\n    }\n    handleOpen = () => {\n        this.setState({\n            open: true\n        })\n    }\n    render(){\n        let sessionsLeft = this.props.client.sessions - this.props.session.length;\n        let message= \n`Hi ${this.props.client.first_name}!\nJust a reminder that your prepaid sessions are almost complete. You have ${sessionsLeft} more sessions until your card is full. \n\nYou can renew your sessions in the studio  at your convenience. Thank you for your continued support and great efforts on your fitness goals! See you soon!\n\nBe well!   \nSue Mackenzie`;\n        return(\n            <div>\n                <IconButton variant=\"contained\" color=\"secondary\" onClick={this.handleOpen}><MailOutline/></IconButton>\n                       <Dialog open={this.state.open} onClose={this.handleClose} fullWidth={true}>\n                       <DialogTitle>Send Reminder </DialogTitle>\n                       <DialogContent>\n                           <DialogContentText>To: {this.props.client.first_name} {this.props.client.last_name}</DialogContentText>\n                           <DialogContentText>Subject: <TextField value={this.state.subject} disabled={true} fullWidth={true}/></DialogContentText>\n                           <DialogContentText>Message: <TextField value={message} disabled={true} fullWidth={true} multiline={true}/></DialogContentText>\n                           <DialogActions>\n                                <Button onClick={this.handleClose}>Cancel</Button>\n                               <Button onClick={this.emailReminder} variant=\"contained\" color=\"primary\">Send</Button>\n                           </DialogActions>\n                       </DialogContent>\n                        </Dialog>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => ({\n    client: state.clients.currentClient[0]\n})\nexport default connect(mapStateToProps)(Email); ","import React, { Component } from 'react';\nimport './clientcard.css'\nimport { connect } from 'react-redux';\nimport LogSessions from '../LogSessionForm/LogSessionForm';\nimport Email from '../Email/Email'; \nimport moment from 'moment';\nimport { IconButton, Button } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons'; \n\n\nclass ClientCard extends Component {\n    clearCard = () => {\n        if(window.confirm('Are you sure to you want to clear this card? All records will be deleted and prepaid sessions will be reset to 0.')){\n            this.props.dispatch({type: 'CLEAR_CARD', payload: this.props.currentClient.id})\n        }\n    }\n    handleDelete = (session) => {\n        if(window.confirm('Are you sure you want to delete this session?')){\n            this.props.dispatch({type: 'DELETE_SESSION', payload: session})\n        }\n    }\n    render() {\n        let sessions = this.props.sessions.filter(session => session.client_id === this.props.currentClient.id);\n        return (\n            <div className=\"flex-container\">\n                <div className=\"card\">\n                    <div className=\"flex-box-header\">\n                        <h3>{this.props.currentClient.first_name} {this.props.currentClient.last_name}</h3>\n                    <div className=\"flex-box-right\">\n                        {sessions.length >= (this.props.currentClient.sessions - 3) && <Email session={sessions}/>}\n                        {sessions.length < this.props.currentClient.sessions && <LogSessions client={this.props.currentClient} />}\n                    </div>\n                    </div>\n                    <p>Prepaid for {this.props.currentClient.sessions} sessions</p>\n                    <div className=\"flex-box\">\n                        {sessions.map((session, i) => {\n                            return (\n                                <div className=\"date\" key={i}>\n                                    <p>{i + 1}. {moment(session.date).format('MM/DD/YYYY')} <IconButton><Delete onClick={()=>this.handleDelete(session)}/></IconButton></p>\n                                </div>\n                            );\n                        })}\n                    </div>\n                    {sessions.length > 0 && <div className=\"bottom\"><Button variant=\"contained\" onClick={this.clearCard}>Clear Card</Button></div>}\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => ({\n    sessions: state.sessions.sessions, \n    currentClient: state.clients.currentClient[0]\n});\nexport default connect(mapStateToProps)(ClientCard); ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ClientCard from '../ClientCard/ClientCard';\nimport { NativeSelect } from '@material-ui/core';\n\nclass UserPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    }\n  }\n  componentDidMount() {\n    this.getClients();\n    this.getSessions();\n  }\n  getClients = () => {\n    this.props.dispatch({ type: 'FETCH_CLIENTS' });\n  }\n  getSessions = () => {\n    this.props.dispatch({ type: 'FETCH_SESSIONS' });\n  }\n  handleClientChange = (event) => {\n    let id = parseInt(event.target.value); \n    // gets the whole client object that matches the client ID to send to redux \n    let clientToView = this.props.clients.filter(client => client.id === id); \n    this.props.dispatch({type: 'SET_CURRENT_CLIENT', payload: clientToView}); \n  }\n  render() {\n    return (\n      <div>\n        <div className=\"flex-container\">\n            <h2>Select a Client</h2>\n        </div>\n        <div className=\"flex-container\">\n          <NativeSelect onChange={(event)=>this.handleClientChange(event)}>\n          <option value=''></option>\n          {this.props.clients.map((client, i) => {\n            return (\n              <option key={i} value={client.id}>{client.first_name} {client.last_name}</option>\n            );\n          })}\n        </NativeSelect>\n        </div>\n        {this.props.currentClient.length > 0 && <ClientCard />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  clients: state.clients.clients,\n  currentClient: state.clients.currentClient\n});\n\nexport default connect(mapStateToProps)(UserPage);\n","import React, {Component} from 'react'; \nimport { Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField } from '@material-ui/core'; \nimport { connect } from 'react-redux'; \n\nclass EditButton extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            open: false, \n            first_name: this.props.clientToEdit.first_name, \n            last_name: this.props.clientToEdit.last_name,\n            email_address: this.props.clientToEdit.email_address,\n            sessions: this.props.clientToEdit.sessions,\n        }\n    }\n    editClient = () => {\n        this.setState({\n            open: false\n        })\n        this.props.dispatch({type: 'EDIT_CLIENT', payload: {first_name: this.state.first_name, last_name: this.state.last_name, email_address: this.state.email_address, sessions: this.state.sessions, id: this.props.clientToEdit.id}});\n    }\n    handleOpen = () => {\n        this.setState({\n            open: true\n        })\n    }\n    handleClose = () => {\n        this.setState({\n            open: false\n        })\n    }\n    handleChangeFor = (event, property) => {\n        this.setState({\n            ...this.state, \n            [property]: event.target.value\n        })\n    }\n    render(){\n        return(\n        <div>\n            <Button onClick={this.handleOpen}>Edit</Button>\n            <Dialog open={this.state.open} onClose={this.handleClose} fullWidth={true}>\n            <DialogTitle>Edit Client Details</DialogTitle>\n            <DialogContent>\n                <TextField type=\"text\" label=\"First Name\" defaultValue={this.props.clientToEdit.first_name} onChange={(event)=>this.handleChangeFor(event, 'first_name')}/>\n                <TextField type=\"text\" label=\"Last Name\" defaultValue={this.props.clientToEdit.last_name} onChange={(event)=>this.handleChangeFor(event, 'last_name')}/>\n                <TextField type=\"text\" label=\"Email Address\" defaultValue={this.props.clientToEdit.email_address} onChange={(event)=>this.handleChangeFor(event, 'email_address')}/>\n                <TextField type=\"text\" label=\"Total Prepaid Sessions\" defaultValue={this.props.clientToEdit.sessions} onChange={(event)=>this.handleChangeFor(event, 'sessions')}/>\n                <DialogActions>\n                     <Button onClick={this.handleClose}>Cancel</Button>\n                    <Button onClick={this.editClient} variant=\"contained\" color=\"primary\">Save</Button>\n                </DialogActions>\n            </DialogContent>\n             </Dialog>\n        </div>\n        );\n    }\n}\nexport default connect()(EditButton); ","import React, { Component } from 'react'; \nimport { IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons'; \nimport { connect } from 'react-redux';\nclass DeleteClient extends Component {\n\n    handleDelete = () => {\n        if(window.confirm(`Are you sure you want to delete ${this.props.client.first_name} ${this.props.client.last_name}? This action cannot be undone.`)){\n            this.props.dispatch({type: 'DELETE_CLIENT', payload: this.props.client.id});\n        } else {\n            alert(`${this.props.client.first_name} ${this.props.client.last_name} saved!`);\n        }\n    }\n    render(){\n        return(\n            <IconButton onClick={()=>this.handleDelete(this.props.client.id)}><Delete/></IconButton>\n        );\n    }\n}\nexport default connect()(DeleteClient); ","import React, {Component} from 'react'; \nimport { TableCell, TableRow } from '@material-ui/core'; \nimport EditButton from './EditButton'; \nimport { connect } from 'react-redux'; \nimport DeleteClient from '../DeleteClient/DeleteClient'; \n\nclass ManageRow extends Component {\n    render(){\n        return(\n            <TableRow>\n            <TableCell>{this.props.client.first_name}</TableCell>\n            <TableCell>{this.props.client.last_name}</TableCell>\n            <TableCell>{this.props.client.email_address}</TableCell>\n            <TableCell>{this.props.client.sessions}</TableCell>\n            <TableCell><EditButton clientToEdit={this.props.client}/></TableCell>\n            <TableCell><DeleteClient client={this.props.client}/></TableCell>\n          </TableRow>\n        );\n    }\n}\nexport default connect()(ManageRow); ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextField, Button, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\nimport ManageRow from './ManageRow'; \n\nclass ManageClients extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      view: 'edit',\n      // the value of 'view' will determine what the user sees, based on what they select in the menu \n      first_name: '',\n      last_name: '',\n      email_address: '', \n      sessions: 0, \n    }\n  }\n  addClient = () => {\n    this.props.dispatch({ type: 'ADD_CLIENT', payload: this.state });\n    this.setState({\n      view: 'edit', \n      first_name: '',\n      last_name: '',\n      email_address: '', \n      sessions: 0\n    })\n  }\n  setView = (view) => {\n    this.setState({\n      view: view\n    })\n  }\n  handleChangeFor = (event, property) => {\n    this.setState({\n      ...this.state, \n      [property]: event.target.value\n    })\n  }\n  render() {\n    return (\n      <div className=\"body-div\">\n        <div className=\"flex-container-header\">\n            <h2>Manage Clients</h2>\n        </div>\n        {this.state.view !== 'add' && \n          <div className=\"center\">\n            <Button variant=\"contained\" color=\"primary\" onClick={()=>this.setView('add')}>Add Client</Button>\n        </div>}\n       \n        <div className=\"flex-container\">\n          {this.state.view === 'add' &&\n            <div className=\"add-form\">\n                <TextField autoComplete=\"off\" type=\"text\" variant=\"outlined\" label=\"First Name\" value={this.state.first_name} onChange={(event) => this.handleChangeFor(event, 'first_name')} />\n                <TextField autoComplete=\"off\" type=\"text\" variant=\"outlined\" label=\"Last Name\" value={this.state.last_name} onChange={(event) => this.handleChangeFor(event, 'last_name')} />\n                <TextField autoComplete=\"off\" type=\"text\" variant=\"outlined\" label=\"Email Address\" value={this.state.email_address} onChange={(event) => this.handleChangeFor(event, 'email_address')} />\n                <TextField autoComplete=\"off\" type=\"number\" variant=\"outlined\" label=\"Sessions Purchased\" onChange={(event) =>this.handleChangeFor(event, 'sessions')}/>\n                <Button color=\"primary\" variant=\"contained\" size=\"large\" onClick={this.addClient}>Add</Button>\n                <Button onClick={()=>this.setView('edit')}>Cancel</Button>\n            </div>}\n        {this.state.view === 'edit' && \n          <div>\n            <Table className=\"manage-table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>First Name</TableCell>\n                  <TableCell>Last Name</TableCell>\n                  <TableCell>Email</TableCell>\n                  <TableCell>Prepaid Sessions</TableCell>\n                  <TableCell>Edit</TableCell>\n                  <TableCell>Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n              {this.props.clients.map((client, i) => {\n          return(\n            <ManageRow key={i} client={client}/>\n          );\n        })}\n              </TableBody>\n            </Table>\n        </div>}\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  user: state.user,\n  clients: state.clients.clients\n});\nexport default connect(mapStateToProps)(ManageClients);\n","import React, { Component } from 'react'; \nimport { Button, TextField, FormLabel } from '@material-ui/core';\nimport moment from 'moment'; \nimport axios from 'axios'; \n\nclass ResetPassword extends Component {\n    constructor(props) {\n        super(props);\n        // User will input e-mail\n        this.state = { email: '' };\n    }\n    handleChange = (event) => {\n        this.setState({\n            email: event.target.value\n        })\n    }\n    handleSubmit = () => {\n        let today = Date.now();\n        today = moment(today).format();\n        axios({\n            method: 'PUT',\n            url: '/api/user/createtoken',\n            data: {email: this.state.email, today: today}\n        }).then((response) => {\n            alert('Please check your e-mail (including your spam folder) for a link to reset your password.');\n            //send an email with nodemailer that includes the token \n            this.props.history.push('/home'); \n        }).catch((error) => {\n            console.log(error);\n            alert('Something went wrong');\n        });\n    }\n    render(){\n        return(\n            <div className=\"center\">\n            <div className=\"reset-form\">\n                <h2>Reset Password</h2>\n                <FormLabel>Enter the email address associated with this account.</FormLabel>\n                    <TextField id=\"email-input\" onChange={this.handleChange}/>\n            </div>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Submit</Button>\n                <Button onClick={()=>this.props.history.push('/home')}>Cancel</Button>\n        </div>\n        );\n    }\n}\nexport default ResetPassword; ","import React, {Component} from 'react'; \nimport {Input, Button, FormLabel} from '@material-ui/core'; \nimport axios from 'axios';\n\nclass NewPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            email_address: '',\n            password: '',\n            confirm_password: '', \n            today: '', \n            token: this.props.match.params.token\n        };\n    }\n    handleChange = (property, event) => {\n        const today = new Date(); \n        this.setState({\n            [property]: event.target.value, \n            today: today\n        });\n       \n    }\n    handleSubmit = () => {\n        if(this.state.password === this.state.confirm_password){\n            axios({\n                method: 'PUT',\n                url: '/api/user/resetpassword',\n                data: this.state\n            }).then((response) => {\n                alert('Update successful! Please login with your new password.');\n                //send an email with nodemailer that includes the token \n                this.props.history.push('/home'); \n            }).catch((error) => {\n                console.log(error);\n                alert('Something went wrong');\n            });\n        } else {\n            alert('Passwords do not match! Please try again.');\n        }\n       \n    }\n    render(){\n        return(\n        <div className=\"center\">\n        <div className=\"reset-form\">\n        <h2>Create New Password</h2>\n            <FormLabel>Email address:\n                <Input onChange={(event)=>this.handleChange('email_address', event)} /><br/>\n            </FormLabel>\n            <FormLabel>New password:\n                <Input type=\"password\" onChange={(event)=>this.handleChange('password', event)} /><br/>\n            </FormLabel>\n            <FormLabel>Confirm password:\n                <Input type=\"password\" onChange={(event)=>this.handleChange('confirm_password', event)} /><br/>\n            </FormLabel>\n        </div>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Submit</Button>\n                <Button onClick={()=>this.props.history.push('/home')}>Cancel</Button>\n            </div>\n        );\n    }\n}\nexport default NewPassword; ","import React from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  content: {\n    backgroundColor: 'white',\n    [theme.breakpoints.down('sm')]: {\n      height: '100vh'\n    },\n    [theme.breakpoints.up('md')]: {\n      height: '80vh'\n    },\n  }\n});\n\nclass GridContainer extends React.Component {\n  render() {\n    const {classes} = this.props;\n    return (\n      <Grid container spacing={0}>\n        <Grid item xs={false} md={12} style={{height: '10vh'}}></Grid>\n        <Grid item xs={false} md={1}></Grid>\n        <Grid className={classes.content} item xs={12} md={10}>\n          {this.props.children}\n        </Grid>\n        <Grid item xs={false} md={1}></Grid>\n        <Grid item xs={false} md={12} style={{height: '10vh'}}></Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(GridContainer); ","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\nimport UserPage from '../UserPage/UserPage';\nimport ManageClients from '../ManageClients/ManageClients';\nimport ResetPassword from '../ResetPassword/ResetPassword';\nimport NewPassword from '../ResetPassword/NewPassword'; \nimport GridContainer from '../GridContainer/GridContainer'; \nimport './App.css';\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    return (\n      <GridContainer>\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n           \n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={UserPage}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/clients\"\n              component={ManageClients}\n            />\n             <Route\n              exact\n              path=\"/resetpassword/\"\n              component={ResetPassword}\n            />\n             <Route\n              exact\n              path=\"/resetpassword/:token\"\n              component={NewPassword}\n            />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404: Page Not Found</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n      </GridContainer>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n// Material UI Theme configuration \nconst theme = createMuiTheme({ \n  typography: {\n    useNextVariants: true,\n  },\n  palette: {\n    primary: {\n      main: '#1fcecb',\n    },\n    secondary: {\n      main: '#1a237e',\n    }, \n    error: {\n      main: '#c51162'\n    }\n  }\n})\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}><MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}